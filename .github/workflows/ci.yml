name: ci

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: "${{ github.repository }}"

jobs:
    turbo-affected:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.turbo-build.outputs.apps }}
        steps:
            - name: Check out code
              uses: actions/checkout@v4
            - name: Cache turbo build setup
              uses: actions/cache@v4
              with:
                  path: .turbo
                  key: "${{ runner.os }}-turbo-${{ github.sha }}"
                  restore-keys: |
                      ${{ runner.os }}-turbo-
            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: npm
            - name: Install dependencies
              run: npm ci
            - name: Build
              id: turbo-build
              run: |
                  mkdir -p _logs

                  npm run summarize > _logs/turbo.log 2>&1
                  echo "Turbo build output:"

                  awk 'BEGIN {found=0} /\{/ {found=1} {if (found) print}' _logs/turbo.log > _logs/turbo.json

                  # Assuming the JSON data is saved in a file called 'output.json'
                  missed_packages=$(jq -c '[.tasks[] | select(.cache.status == "MISS") | {package: .package, directory: .directory, name: (.package | sub("^@techgarden/"; ""))}]' _logs/turbo.json)

                  # Print the missed packages as a JSON array
                  echo "apps=$missed_packages" >> "$GITHUB_OUTPUT"
                  echo "apps=$missed_packages"

    docker-build:
        needs: turbo-affected
        permissions:
            contents: read
            packages: write
        runs-on: ubuntu-latest
        if: ${{ needs.turbo-affected.outputs.matrix != '[]' }}
        strategy:
            matrix:
                app: ${{ fromJson(needs.turbo-affected.outputs.matrix) }}
        steps:
            - name: Check if package is '@techgarden/sprout-ui'
              id: skip-check
              run: |
                  if [[ "${{ matrix.app.package }}" != "@techgarden/sprout-ui" ]]; then
                      echo "Skipping build for ${{ matrix.app.package }}"
                      echo "skip=true" >> "$GITHUB_ENV"
                  else
                      echo "skip=false" >> "$GITHUB_ENV"
                  fi

            - name: Checkout
              if: ${{ env.skip != 'true' }}
              uses: actions/checkout@v4

            - name: Cache turbo build setup
              if: ${{ env.skip != 'true' }}
              uses: actions/cache@v4
              with:
                  path: .turbo
                  key: "${{ runner.os }}-turbo-${{ github.sha }}"
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Build ui for ${{ matrix.app.package }}
              if: ${{ env.skip != 'true' }}
              run: |
                  npx -p turbo turbo prune ${{ matrix.app.package }} --docker
                  cd ./out
                  cp -r ./json/* ./full
                  cd ./full
                  npm ci
                  npm run build

            - name: Set up Docker Buildx for ${{ matrix.app.package }}
              if: ${{ env.skip != 'true' }}
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              if: ${{ env.skip != 'true' }}
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              if: ${{ env.skip != 'true' }}
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/techgarden/${{ matrix.app.name }}
                  flavor: |
                      latest=auto
                      prefix=
                      suffix=
                  tags: |
                      type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
                      type=sha,prefix=,format=long

            - name: Build and push the Docker image for ${{ matrix.app.package }}
              if: ${{ env.skip != 'true' }}
              uses: docker/build-push-action@v5
              with:
                  context: "./out/full/${{ matrix.app.directory }}"
                  file: "./out/full/${{ matrix.app.directory }}/Dockerfile"
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
