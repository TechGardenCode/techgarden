name: ci
"on":
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: "${{ github.repository }}"
jobs:
    build-and-dockerize:
        runs-on: ubuntu-latest
        steps:
            - name: Check out code
              uses: actions/checkout@v4

            - name: Cache turbo build setup
              uses: actions/cache@v4
              with:
                  path: .turbo
                  key: "${{ runner.os }}-turbo-${{ github.sha }}"
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: npm

            - name: Install dependencies
              run: npm ci

            - name: Build with Turbo
              id: turbo-build
              run: |
                  rm -rf .turbo/cache
                  mkdir -p .logs
                  npm run build > .logs/turbo.log 2>&1
                  echo "Turbo build output:"
                  cat .logs/turbo.log

                  APPS=$(grep -oE 'apps/[^ ]+' .logs/turbo.log | sort -u)

                  echo "Apps that had a cache miss:"
                  echo "$APPS"

                  # Build compact JSON array
                  JSON_ARRAY=$(printf '['; printf '"%s",' $APPS | sed 's/,$//'; printf ']')

                  # Export it cleanly without breaking GitHub's format
                  echo "apps=${JSON_ARRAY}" >> "$GITHUB_ENV"

            - name: Iterate over apps and build Docker images
              env:
                  APPS: ${{ env.apps }}
              run: |
                  echo "Apps to process: $APPS"
                  for APP in $(echo $APPS | jq -r '.[]'); do
                    echo "Processing app: $APP"

                    FORMATTED_APP=$(echo $APP | awk -F'/' '{print $3"-"$2}')
                    FORMATTED_APP_DIR=$(echo $APP | awk -F'/' '{print $1"/"$2"/"$3}')

                    echo "Formatted app: $FORMATTED_APP"
                    echo "Formatted app directory: $FORMATTED_APP_DIR"

                    # Set up Docker Buildx
                    docker buildx create --use

                    # Login to GitHub Container Registry
                    echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

                    # Extract metadata for Docker
                    TAGS="latest,${{ github.sha }}"
                    LABELS=""

                    # Build and push the Docker image
                    docker buildx build \
                      --push \
                      --cache-from=type=gha \
                      --cache-to=type=gha,mode=max \
                      --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$FORMATTED_APP:latest" \
                      --tag "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$FORMATTED_APP:${{ github.sha }}" \
                      --labels "$LABELS" \
                      "./$FORMATTED_APP_DIR"
                  done
