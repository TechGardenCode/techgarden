name: ci
"on":
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: "${{ github.repository }}"
jobs:
    turbo-build:
        runs-on: ubuntu-latest
        outputs:
          services: ${{ steps.turbo-build.outputs.apps }}
        steps:
            - name: Check out code
              uses: actions/checkout@v4
            - name: Cache turbo build setup
              uses: actions/cache@v4
              with:
                  path: .turbo
                  key: "${{ runner.os }}-turbo-${{ github.sha }}"
                  restore-keys: |
                      ${{ runner.os }}-turbo-
            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: npm
            - name: Install dependencies
              run: npm ci
            - name: Build
              id: turbo-build
              run: |
                  rm -rf .turbo/cache
                  mkdir -p .logs
                  npm run build > .logs/turbo.log 2>&1
                  echo "Turbo build output:"
                  cat .logs/turbo.log

                  APPS=$(grep -oE 'apps/[^ ]+' .logs/turbo.log | sort -u)

                  echo "Apps that had a cache miss:"
                  echo "$APPS"
                    
                  # Build compact JSON array
                  JSON_ARRAY=$(printf '['; printf '"%s",' $APPS | sed 's/,$//'; printf ']')

                  # Export it cleanly without breaking GitHub's format
                  echo "apps=${JSON_ARRAY}" >> "$GITHUB_OUTPUT"
                  echo "apps=${JSON_ARRAY}"
    docker-build:
        needs: turbo-build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                app: ${{ fromJson(needs.turbo-build.outputs.apps) }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: "Build Docker image for ${{ matrix.app }}"
              run: |
                  echo "Building Docker image for ${{ matrix.app }}"
                  #   docker build -t your-org/${{ matrix.app }} ./${{ matrix.app }}
